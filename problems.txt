Mathematics:

1. Count digits -> Iterative, O(log(N))
2. Count digits -> Closed form solution + Library function, O(?): Implementation dependent
3. Palindrome number -> O(log(N))

17. Absolute value -> O(1)
18. Celcius to Fahrenheit -> O(1)
19. Roots of quadratic quation -> O(log(D))
22. Nth term of GP -> O(log(N))

4. Factorial -> Iterative, int (Max N = 12), O(N)
20. Factorial -> Iterative, long long (Max N = 20), O(N)
5. Count trailing zeros in factorial -> Iterative, Legendre's formula, O(log(N))
21. Digits in factorial -> Iterative, O(N*logN)
31. Digits in factorial -> Stirling's approximation, O(?): Implementation dependent
33. Factorial of large positive integers -> 

6. GCD -> Naive, O(min(a, b))
7. GCD -> Iterative Euclid's algorithm (difference), O(log(min(a, b)))
8. GCD -> Iterative Euclid's algorithm (modulus), O(log(min(a, b)))
9. LCM -> Naive, O(a * b)
10. LCM -> Using Iterative Euclid's algorithm (modulus), O(log(min(a, b)))
29. Binary GCD (Stein's algorithm) -> Iterative
30. Binary GCD (Stein's algorithm) -> Iterative, Less optimized

11. Primality test -> O(sqrt(N))
12. Prime factorization -> O(sqrt(N))
13. Positive divisors -> O(sqrt(N))
14. Sieve of Eratosthenes -> O(N*lnln(N)) time, O(N) space
32. Segmented Sieve -> 

23. Has 3 positive divisors -> Naive, O(sqrt(N))
24. Has 3 positive divisors -> Efficient, O(log(N)) + O(N^0.25) = O(N^0.25)
25. All numbers with 3 positive divisors till N -> Naive, O(N * N^0.25)
26. All numbers with 3 positive divisors till N -> Efficient, O(N^0.5 * N^0.25)

15. Power -> Iterative Naive, O(exponent) 
16. Binary exponentiation -> Iterative, O(log(exponent))

27. Addition under modulo -> O(1): Assuming modulo is O(1)
28. Multiplication under modulo -> O(1): Assuming modulo is O(1)
34. Modular multiplicative inverse ->


Bitwise operators

1. Set, Clear, Toggle, Check bit and others -> O(1)
19. Check bit with right shift operator -> O(1)
2. Binary representation of integers from 1 to N -> O(32 * N)
3. 1's & 2's complement of an integer -> O(1)
18. 1's & 2's complement of an integer with fewer operations -> O(1)

4. Right-most significant bit position -> Naive, O(32)
5. Right-most significant bit position -> Naive, O(32), Checking bit by bit from LSB to MSB, Conceptually same as last approach
6. Right-most significant bit position -> 2's complement idea, O(?), Implementation dependent

7. Count set bits -> Naive, Checking bit by bit from LSB to RSB, O(32)
8. Count set bits -> Kernighan's algorithm, O(total set bits)
11. Count set bits for multiple queries -> Look up table method, O(1 + t*1) = O(t) time, O(1) space

9. Is an integer a power of 2? -> O(total set bits)
24. Is an integer a power of 2? -> O(1)

10. Integers a & b differ by how many bits? -> O(total set bits in a ^ b)

12. Find the only element occuring odd no. of times in an array -> O(N)
13. Variation of Q12: Find missing number in array -> O(N)
15. XOR of numbers from 1 to N -> O(1)
16. Variation of Q12: Find missing number in array -> optimized, O(N)
14. Find the only two elements occuring odd no. of times in an array -> O(N) 

17. Generate power set of an array using Bitwise operators -> O(2^N * N)

20. Integer is sparse or not? -> O(1)
21. Positive integer is sparse or not? -> O(1)

22. Longest Consecutive set bits -> O(32)
23. Longest Consecutive set bits -> O(length of longest consecutive set bits)

25. Swap even and odd bits in an integer -> O(32), Can be reduced to O(1) by using values for masks directly

26. Maximum AND value of elements of array -> O(N^2)
27. Maximum AND value of elements of array -> O(32 * N)

28. Maximum OR value of elements of array -> O(N)
29. Maximum OR value of elements of array -> O(N^2)

30. Binary to Gray code -> O(1)
31. Gray code to Binary -> O(31)


Recursion

1. Print N to 1 
2. Print 1 to N 
3. Sum of first N natural numbers 
4. Is the string a palindrome? 
5. Linear Search
6. Subsequences of a string